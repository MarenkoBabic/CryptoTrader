Teil 1.View

<script src="~/Scripts/highstock/Test/highstock.js"></script>
<script src="~/Scripts/highstock/Test/exporting.js"></script>
<div id="Chart" style="height: 400px; min-width: 100%; margin-top: 20px;"></div>


<script>
    $(document).ready(function () {
        UpdateChart();
    });

    function UpdateChart() {
        if ($("collapseExample").hasClass("in") == false) {
            $.ajax({
                url: '/Market/GetOHCLChartLocalData',
                success: function (json) {
                    CreateChart(json);
                },
                error: function (errorData) {
                    console.log(errorData);
                }
            });
        }
    }

     //Create the chart
    function CreateChart(jsonData) {
        Highcharts.stockChart('Chart', {
            rangeSelector: {
                selected: 1
            },
            title: {
                text: 'Aktueller BitCoin Kurs'
            },
            series: [{
                name: 'BTC/EUR',
                data: jsonData,
                tooltip: {
                    valueDecimals: 2
                }
            }]
        });
    }
</script>

        public JsonResult LoadChartData()
        {
            List<TickerChartViewModel> result = TickerList();
            return Json( TickerChartViewModel.GetList( result ), JsonRequestBehavior.AllowGet );
        }

Teil 2.Helper
        public static List<VMTicker> GetTickerListFromDB()
        {
            using (CryptoTraderEntities db = new CryptoTraderEntities())
            {
                List<VMTicker> getTickerList = new List<VMTicker>();

                var dbTickerList = db.Ticker.Where(x => x.currency_trg == "BTC").ToList();

                foreach (var x in dbTickerList)
                {
                    getTickerList.Add(new VMTicker
                    {
                        UnixTime = DateTimeHelper.ConvertToUnixTimeMs(x.data_create).ToString(),
                        Value = x.rate.ToString()
                    }
                    );
                }
                return getTickerList;
            }
        }

Teil3. ViewModel
    public class VMTicker
    {
        public string UnixTime { get; set; }
        public string Value { get; set; }

        public static List<decimal[]> GetList(List<VMTicker> list)
        {
            List<decimal[]> result = new List<decimal[]>();
            int i = 0;
            foreach (var item in list)
            {
                result.Add(new decimal[2]);
                result.Last()[0] = decimal.Parse(item.UnixTime);
                result.Last()[1] = decimal.Parse(item.Value);
                i++;
            }
            return result;
        }

